# -*- coding: utf-8 -*-
"""Afame sales Research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rUlbZO8azDdwbsZJl-lVY0CAd84BERDO
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importing Libraries"""

import numpy as np
import pandas as pd
import datetime as dt

import matplotlib.pyplot as plt
import seaborn as sns

import scipy.stats as stats
from sklearn.cluster import KMeans

"""# Importing Datsets"""

sales = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ECOMM DATA.xlsx - Orders.csv')
sales.head()

"""# Data Analysis

The purpose of this sales analytics is to simplify the information available to the company and help them clearly understand
the sale's performance, sales trends, and opportunities.
"""

days = sales['Ship Date'].str.split('/').str.get(0).values
months = sales['Ship Date'].str.split('/').str.get(1).values
years = sales['Ship Date'].str.split('/').str.get(2).values

date_series = years +'/' + months + '/'+ days

sales['Ship Date'] = pd.to_datetime(date_series)

sales.info() #notice the memory usage before conveting the data types

# let's check the variables that will be best suitable for category dtype
sales.nunique()

sales['Region'] = sales['Region'].astype('category')
sales['Product Name'] = sales['Product Name'].astype('category')
sales['Ship Mode'] = sales['Ship Mode'].astype('category')
sales['Order Priority'] = sales['Order Priority'].astype('category')

sales.info() #notice the memory usage now

sales.head() #take a look at data frame structure

"""# Understanding existing variables and creating new variables

**Revenue** is the total amount of income generated by the sale of goods or services related to the company's primary operations.

**Profit** is typically called net profit or the bottom line, is the amount of income that remains after accounting for all expenses, debts, additional income streams, and operating costs.

So if we want to get the expense we can get it by deducting Profit from the Revenue.
"""

sales['Expense'] = sales['Profit'] -sales['Shipping Cost']

"""The **profit margin** is a ratio of a company's profit (sales minus all expenses) divided by its revenue. The profit margin ratio compares profit to sales and tells you how well the company is handling its finances overall. It's always expressed as a percentage."""

sales['Profit_Margin'] = (sales['Profit'] / sales['Shipping Cost'] ) * 100

sales.head()

"""As we know by now that **Profit Margin** tells a lot about company's performance, let's rank them based on their Profit Margin."""

sales['Rank'] = sales['Profit_Margin'].rank(ascending=False).astype('int')

"""# Which Region earns the highest Profit Margin? *and it's associated country?"""

sales.sort_values(by='Profit_Margin', ascending=False).head(1)

"""# Which Region earns the highest Profit? *and it's associated country?"""

regions = sales.groupby(by='Region')

df_highest_profit_regions = pd.DataFrame(columns=sales.columns)

for reg, data in regions:
    highest_profit = data.nlargest(1, 'Profit')
    df_highest_profit_regions = pd.concat([df_highest_profit_regions, highest_profit])

df_highest_profit_regions.sort_values(by='Profit', ascending=False)

df_highest_profit_regions['Region']

fig, ax = plt.subplots(figsize=(10,7))

tmp_df = df_highest_profit_regions.copy()

tmp_df = tmp_df.sort_values(by='Profit', ascending=False)

sns.barplot(x = tmp_df['Profit'], y=tmp_df['Region'], orient='h', data=tmp_df,\
           order=['Africa', 'Canada', 'Caribbean', 'Central', 'Central Asia', 'EMEA', 'East'],
            capsize=0.2, ax=ax)

lbs = ['Africa: 1719922.04 \n Country: Pakistan',
      'Canada: 1678540.98 \n Country: Samoa',
      'Caribbean: 1541705.29 \n Country: Iceland',
      'Central: 1487261.02 \n Country: Honduras',
      'Central Asia: 1367272.50 \n Country: Myanmar',
      'EMEA: 1254472.05 \n Country: Djibouti',
      'East: 1152486.42 \n Country: Mexico']

ax.bar_label(ax.containers[-1], labels=lbs,label_type='center')

plt.title('Region with their Profits')
plt.xlabel('Regions')
plt.ylabel('Total Profit')
plt.show()

"""# Which Region earns the highest Profit Margin?"""

df_highest_pmargin_region = pd.DataFrame(columns=sales.columns)

for reg, data in regions:
    highest_margin = data.nlargest(1, 'Profit_Margin')
    df_highest_pmargin_region = pd.concat([df_highest_pmargin_region, highest_margin])

df_highest_pmargin_region.sort_values(by='Profit_Margin', ascending=False)

fig, ax = plt.subplots(figsize=(10,6))

tmp_df = df_highest_profit_regions.copy()
tmp_df = tmp_df.sort_values(by='Profit_Margin', ascending=False)
plt.stem(tmp_df['Profit_Margin'],markerfmt='D')
my_range=range(1,len(tmp_df.index)+1)
plt.xticks( my_range, tmp_df['Region'], rotation=45)

plt.show()

!pip install squarify

"""# Which Region has the highest countries operating?

# Which Region has the highest total Revenue?

# Which Region has the highest total Profit?

# Which Region has the highest Expenses?
"""

tmp_df=regions.agg({'Country':'count',
             'Sales': 'sum',
             'Shipping Cost': 'sum',
            'Profit': 'sum'})

plt.figure(figsize=(6,6))
tmp_df['Country'].plot.pie(autopct = "%1.0f%%", colors = sns.color_palette('copper'), shadow = True,
                        )

plt.title('Proportion of countries per Region')
plt.axis('equal')
plt.show()

import squarify

plt.figure(figsize=(15,8))
revs = tmp_df['Shipping Cost'].values
labels = ['Africa: 1719922.04',
 'Canada:\n 14094265.13',
 'Caribbean:\n 9170385.49',
 'Central: 33368932.11',
 'Central Asia:\n 14052706.58',
 'EMEA:\n 5643356.55',
 'East: 39672031.43',
 'South: \n5643356.55 ',
 'central: 1719922.04',
 'West:\n 14094265.13',
 'Oceania:\n 9170385.49',
 'North: 33368932.11',
 'Southeast Asia:\n 14052706.58']
squarify.plot(revs,label=labels, color= sns.color_palette('copper'), alpha=0.7)
plt.show()

plt.figure(figsize=(15,8))
revs = tmp_df['Profit'].values
labels = ['Africa: 1719922.04',
 'Canada:\n 14094265.13',
 'Caribbean:\n 9170385.49',
 'Central: 33368932.11',
 'Central Asia:\n 14052706.58',
 'EMEA:\n 5643356.55',
 'East: 39672031.43',
 'South: \n5643356.55 ',
 'central: 1719922.04',
 'West:\n 14094265.13',
 'Oceania:\n 9170385.49',
 'North: 33368932.11',
 'Southeast Asia:\n 14052706.58']
squarify.plot(revs,label=labels, color= sns.color_palette('copper'), alpha=0.7)
plt.show()

"""# Region wise profit Margin over the years"""

for k, d in regions:
    t_df = regions.get_group(k)
    t_df.set_index('Ship Date').plot(y=['Profit_Margin'])
    plt.title('Profit Margin of {} over the years'.format(k))
    plt.show()

"""# which Item type has the highest dealears?"""

items_group = sales.groupby(by='Item_Type')

items_group.agg({'Country': 'count',
                'Unit_Cost': 'sum',
                'Total_Revenue': 'sum',
                'Total_Profit': 'sum',
                'Expense': 'sum'})

plt.figure(figsize=(10,6))

tmp_df['Country'].plot.pie(autopct = "%1.0f%%", colors = sns.color_palette('copper'), shadow = True,
                          explode=(0, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0, 0, 0))

plt.title('No.Coutries dealing into each Item type')
plt.axis('equal')
plt.show()

"""# Which Item Type has the highest Total Revenue?"""

def highlight_cols(x):
    df = x.copy()
    df.loc[:, 'Total_Revenue'] = 'background-color: green'
    df[['Country', 'Unit_Cost', 'Total_Profit','Expense']] = 'background-color: grey'
    return df

# Reorder the dataframe
df = tmp_df['Sales'].to_frame()
df = df.sort_values(by=['Sales'])

# initialize the figure
plt.figure(figsize=(20,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

# Constants = parameters controling the plot layout:
upperLimit = 100
lowerLimit = 30
labelPadding = 8

# Compute max and min in the dataset
max = df['Sales'].max()

# Let's compute heights: they are a conversion of each item value in those new coordinates
# In our example, 0 in the dataset will be converted to the lowerLimit (10)
# The maximum will be converted to the upperLimit (100)
slope = (max - lowerLimit) / max
heights = slope * df['Sales'] + lowerLimit

# Compute the width of each bar. In total we have 2*Pi = 360Â°
width = 2*np.pi / len(df.index)

# Compute the angle each bar is centered on:
indexes = list(range(1, len(df.index)+1))
angles = [element * width for element in indexes]
angles

# Draw bars
bars = ax.bar(
    x=angles,
    height=heights,
    width=width,
    bottom=lowerLimit,
    linewidth=2,
    edgecolor="white",
    color="#61a4b2",
)

# Add labels
for bar, angle, height, label in zip(bars,angles, heights, df.index):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else:
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle,
        y=lowerLimit + bar.get_height() + labelPadding,
        s=label,
        ha=alignment,
        va='center',
        rotation=rotation,
        rotation_mode="anchor")

"""# Which Item type has the highest Total Profit?"""

def highlight_cols(x):
    df = x.copy()
    df.loc[:, 'Total_Profit'] = 'background-color: green'
    df[['Country', 'Unit_Cost', 'Total_Revenue','Expense']] = 'background-color: grey'
    return df

# Reorder the dataframe
df = tmp_df['Sales'].to_frame()
df = df.sort_values(by=['Sales'])

# initialize the figure
plt.figure(figsize=(20,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

# Constants = parameters controling the plot layout:
upperLimit = 100
lowerLimit = 30
labelPadding = 4

# Compute max and min in the dataset
max = df['Sales'].max()

# Let's compute heights: they are a conversion of each item value in those new coordinates
# In our example, 0 in the dataset will be converted to the lowerLimit (10)
# The maximum will be converted to the upperLimit (100)
slope = (max - lowerLimit) / max
heights = slope * df['Sales'] + lowerLimit

# Compute the width of each bar. In total we have 2*Pi = 360Â°
width = 2*np.pi / len(df.index)

# Compute the angle each bar is centered on:
indexes = list(range(1, len(df.index)+1))
angles = [element * width for element in indexes]
angles

# Draw bars
bars = ax.bar(
    x=angles,
    height=heights,
    width=width,
    bottom=lowerLimit,
    linewidth=2,
    edgecolor="white",
    color="#61a4b2",
)

# Add labels
for bar, angle, height, label in zip(bars,angles, heights, df.index):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else:
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle,
        y=lowerLimit + bar.get_height() + labelPadding,
        s=label,
        ha=alignment,
        va='center',
        rotation=rotation,
        rotation_mode="anchor")

"""# Which Item Type has the highest Expense?

# Which channel has highest no of dealers/ total revenue/ total profit/ expense?
"""

channel_group.agg({'Country': 'count',
                  'Total_Revenue': 'sum',
                  'Total_Profit': 'sum',
                  'Expense': 'sum'}).T

"""###### Which is the most Prevailed Order Priority category High/Low/ Medium or Uregnt?"""

sales['Order_Priority'].value_counts().plot.pie(autopct = "%1.0f%%", colors = sns.color_palette('copper'), shadow = True,
                          explode = (0.1,0,0,0))

plt.title('Order Priority types count')
plt.axis('equal')
plt.show()

op_group = sales.groupby('Order_Priority')

"""###### Profit Margin per Order priority over the years?"""

for k, data in op_group:
    t_df = op_group.get_group(k)
    t_df.set_index('Ship_Date').plot(y=['Total_Revenue'])
    plt.title('Profit Margin of {} over the years'.format(k))
    plt.show()